spring:
  datasource:
    url: jdbc:p6spy:mysql://localhost:3306/freelancer_portal?useSSL=false&serverTimezone=UTC&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
    username: root
    password: root
    driver-class-name: com.p6spy.engine.spy.P6SpyDriver
    hikari:
      # Maximum pool size
      maximum-pool-size: 10
      # Minimum idle connections
      minimum-idle: 5
      # How long a connection can remain idle in the pool
      idle-timeout: 60000
      # Maximum lifetime of a connection in the pool
      max-lifetime: 1800000
      # How long to wait for a connection from the pool
      connection-timeout: 30000
      # Test query to validate connections
      connection-test-query: SELECT 1
      # MySQL wait_timeout is usually 28800 seconds (8 hours)
      # Set keepalive lower to prevent connection issues
      keepalive-time: 240000
      # Fix for "Can't call commit when autocommit=true" error
      auto-commit: false
      # Add these properties to ensure transaction isolation is set properly
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
        useServerPrepStmts: true
        useLocalSessionState: true
        rewriteBatchedStatements: true
        cacheResultSetMetadata: true
        cacheServerConfiguration: true
        elideSetAutoCommits: true
        maintainTimeStats: false
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQL8Dialect
        generate_statistics: true
        jdbc.batch_size: 50
        order_inserts: true
        order_updates: true
        cache:
          use_second_level_cache: true
          region.factory_class: org.hibernate.cache.jcache.internal.JCacheRegionFactory
          use_query_cache: true
        javax.cache.provider: org.ehcache.jsr107.EhcacheCachingProvider
        default_batch_fetch_size: 20
        # Add connection handling properties
        connection.provider_disables_autocommit: false
  web:
    cors:
      allowed-origins: http://localhost:4200
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: >
        Authorization,
        Content-Type,
        X-Requested-With,
        Accept,
        Origin,
        Access-Control-Request-Method,
        Access-Control-Request-Headers
      exposed-headers: Authorization
      allow-credentials: true
      max-age: 3600
  # File upload configuration
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 10MB
      max-request-size: 15MB
  # Zipkin Configuration for distributed tracing
  zipkin:
    baseUrl: ${ZIPKIN_URL:http://localhost:9411/}
    enabled: ${ZIPKIN_ENABLED:false}
  tracing:
    enabled: ${ZIPKIN_ENABLED:false}
    sampling:
      probability: 1.0
  sleuth:
    enabled: ${ZIPKIN_ENABLED:false}
    sampler:
      probability: 1.0

server:
  port: 8080
  servlet:
    context-path: /api/v1

# JWT Configuration
jwt:
  secret: 5367566B59703373367639792F423F4528482B4D6251655468576D5A71347437
  expiration: 86400000 # 24 hours in milliseconds

# Application security configuration
app:
  security:
    jwt:
      secret: ${jwt.secret}
      expiration: ${jwt.expiration}
  # File storage configuration
  file:
    upload-dir: ./uploads

logging:
  level:
    com.freelancer.portal.security: DEBUG
    org.springframework.security: DEBUG
    org:
      springframework:
        security: INFO
        web: INFO
    com:
      freelancer:
        portal: INFO
  file:
    name: ${LOG_PATH:-./logs}/${LOG_FILE:-freelancer-portal}.log
    max-size: 10MB
    max-history: 30
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{traceId:-},%X{spanId:-}] %-5level %logger{36} [%X{correlationId:-}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] [%X{traceId:-},%X{spanId:-}] %-5level %logger{36} [%X{correlationId:-}] - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,env,httptrace,threaddump,heapdump,flyway,liquibase,scheduledtasks,mappings,beans,caches
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
      group:
        readiness:
          include: db,diskSpace
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        jdbc.connections: true
        system.cpu.usage: true
        process.cpu.usage: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
        jdbc.connections: 0.5, 0.9, 0.95, 0.99
    tags:
      application: freelancer-portal-api
    enable:
      jvm: true
      process: true
      system: true
      jdbc: true
      tomcat: true
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true
  health:
    diskspace:
      enabled: true
      threshold: 10GB
    db:
      enabled: true

# ELK Stack Configuration
elk:
  logstash:
    host: ${LOGSTASH_HOST:localhost}
    port: ${LOGSTASH_PORT:5044}
    enabled: ${LOGSTASH_ENABLED:false}

